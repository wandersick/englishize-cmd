<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://chocolatey.org/docs/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces 
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements 
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>englishizecmd</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>2.0.0.0</version>
    <packageSourceUrl>https://github.com/wandersick/englishize-cmd/tree/master/Setup/Chocolatey/EnglishizeCmd</packageSourceUrl>
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
    <owners>wandersick</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>EnglishizeCmd</title>
    <authors>wandersick</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>https://tech.wandersick.com/p/change-non-english-command-line.html</projectUrl>
    <iconUrl>https://cdn.statically.io/gh/wandersick/englishize-cmd/master/Data/EnglishizeCmd-icon.png</iconUrl>
    <!-- <copyright>Year Software Vendor</copyright> -->
    <!-- If there is a license Url available, it is required for the community feed -->
    <licenseUrl>https://raw.github.com/wandersick/englishize-cmd/master/LICENSE</licenseUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>
    <projectSourceUrl>https://github.com/wandersick/englishize-cmd</projectSourceUrl>
    <docsUrl>https://github.com/wandersick/englishize-cmd</docsUrl>
    <mailingListUrl>https://feedburner.google.com/fb/a/mailverify?uri=wandersick</mailingListUrl>
    <bugTrackerUrl>https://github.com/wandersick/englishize-cmd/issues</bugTrackerUrl>
    <tags>Multilingual MUI Localization Localisation Englishise English Language Windows Batch Script Command CLI</tags>
    <summary>Change non-English command-line interface to English fast</summary>
    <description>There often comes a need to use built-in command-line tools in English in non-English Windows, as they are localized to another language which can be difficult for admins who only speak English. 'Englishize Cmd' employs a different technique to 'englishize' CLI tools with a click.

## List of Features

1. Toggles between English and non-English for many Windows commands
2. For English system admins who manages Windows PCs of other languages
3. No need to log off; settings are applied immediately
4. Comes with a restorer. Apply or restore is as simple as a click
5. Better character compatibility than changing DOS codepage
6. Many languages and executables are supported. Customizable
7. Ensure the outputs which your scripts catch are always in English
8. Administrator rights are required. It asks for rights to elevates itself. (Does not elevate over network mapped drives)
9. Parameter `/quiet` can be used to suppress confirmation messages for unattended usage. (Only works when existing Command Prompt is run elevated)
10. Supports Windows Vista and later, as well as their server versions only, including Windows 10 or Windows Server 2019
11. Portable by default. Optional installer enables `EnglishizeCmd` and `RestoreCmd` commands globally in Command Prompt and Run Prompt. (The commands including the extensions would be `EnglishizeCmd.bat` and `RestoreCmd.bat`)

### Getting Started

"Englishize Cmd" comes with 4 files:

1. `EnglishizeCmd.bat` for changing command line tools from non-English to English.
2. `RestoreCmd.bat` to restore everything back to original language, including original permissions and ownerships.
3. `_lang_codes.txt` is a modifiable list containing all non-English language codes. It includes most languages but in case your language is not there, add it and "Englishize Cmd" will support it.
4. `_files_to_process.txt` is a modifiable list of file names of command-line executables that will be affected in the change. All commands in Windows Vista, 7 and 8.1 should be covered (although it contains much more commands than there actually are, it doesn't matter because it has no effect on commands that don't exist.) If you decide some commands are better left localized rather than being changed to English, remove them from this list before running "EnglishizeCmd.bat". Also, although the list covers command-line executables, you can add GUI – Graphical User Interface - programs such as Paint - mspaint.exe and lots of others to "_files_to_process.txt". There is a limitation here though. Windows comes with both English and non-English .mui files for command-line programs only; by default .mui for GUI programs don't exist in en-US folder until users install the English MUI through Windows Update) or some third-party tool (for non-Ultimate/Enterprise Windows users).

**Note**:  The above files would be located in `%ProgramFiles(x86)%\wandersick\EnglishizeCmd` (for an all-user setup)
 </description>
    <releaseNotes>https://tech.wandersick.com/p/change-non-english-command-line.html#releasenotes</releaseNotes>
    <!-- =============================== -->      

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-core.extension" version="1.1.0" />
    </dependencies>-->
    <!-- chocolatey-core.extension - https://chocolatey.org/packages/chocolatey-core.extension
         - You want to use Get-UninstallRegistryKey on less than 0.9.10 (in chocolateyUninstall.ps1)
         - You want to use Get-PackageParameters and on less than 0.11.0
         - You want to take advantage of other functions in the core community maintainer's team extension package
    -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="tools\**" target="tools" />
    <!--Building from Linux? You may need this instead: <file src="tools/**" target="tools" />-->
  </files>
</package>
